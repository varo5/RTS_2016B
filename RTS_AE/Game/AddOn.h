/**********************************************************************************************//**
 * @file	Game\AddOn.h
 *
 * @brief	Declares the add on class.
 **************************************************************************************************/

#pragma once
 /************************************************************************************************************************/
 /* Inclusion of the necessary header files																				*/
 /************************************************************************************************************************/
#include "BaseClass.h"
#include <Graphics/Sprite.h>
#include <vector>

/**********************************************************************************************//**
 * @enum	AddOnId
 *
 * @brief	Values that represent add on identifiers.
 **************************************************************************************************/

enum struct AddOnId
{
	Scripts			= 0,		/**< Script ID */
};

/**********************************************************************************************//**
 * @class	aeAddOn
 *
 * @brief	An add on.
 **************************************************************************************************/

class aeAddOn : public aeBaseClass
{
public:
	/************************************************************************************************************************/
	/* Constructors                                                        													*/
	/************************************************************************************************************************/

	aeAddOn();
	virtual ~aeAddOn();	

	/************************************************************************************************************************/
	/* Functions Declaration	                                           													*/
	/************************************************************************************************************************/
public:

	/**********************************************************************************************//**
	 * @fn	AddOnId aeAddOn::GetAddOnID();
	 *
	 * @brief	Gets add on identifier.
	 *
	 * @return	The add on identifier.
	 **************************************************************************************************/

	AddOnId GetAddOnID();
	/**********************************************************************************************//**
	 * @fn	virtual void aeAddOn::Init(aeBaseClass* pParent) = 0;
	 *
	 * @brief	Initializes with the given parent pointer.
	 *
	 * @param [in,out]	pParent	If non-null, the parent pointer.
	 **************************************************************************************************/

	virtual int Init(aeBaseClass* pParent) = 0;

	/**********************************************************************************************//**
	 * @fn	virtual void aeAddOn::Update(float fDelta) = 0;
	 *
	 * @brief	Updates the given fDelta.
	 *
	 * @param	fDelta	The delta time.
	 **************************************************************************************************/

	virtual void Update(float fDelta) = 0;

	/**********************************************************************************************//**
	 * @fn	virtual void aeAddOn::Render(aeRenderer* pRenderer)
	 *
	 * @brief	Paints on the given renderer pointer.
	 *
	 * @param [in,out]	pRenderer	The renderer pointer.
	 **************************************************************************************************/

	virtual void Render(aeRenderer* pRenderer) {};

	/**********************************************************************************************//**
	 * @fn	virtual void aeAddOn::Destroy() = 0;
	 *
	 * @brief	Destroys this object.
	 **************************************************************************************************/

	virtual void Destroy() = 0;

protected:
	AddOnId m_nAddOnID;
};


/**********************************************************************************************//**
 * @typedef	std::vector<aeAddOn*> aeAddOns
 *
 * @brief	Defines an alias representing the add ons vector.
 **************************************************************************************************/

typedef std::vector<aeAddOn*> aeAddOns;
