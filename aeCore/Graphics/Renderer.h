/**********************************************************************************************//**
 * @file	Graphics\Renderer.h
 *
 * @brief	Declares the renderer class.
 **************************************************************************************************/

#pragma once
#include "AppWindow.h"

namespace aeCore
{
	class aeAppWindow;
	class aeSprite;
	/**********************************************************************************************//**
	 * @class	aeRenderer
	 *
	 * @brief	Stores the window renderer so it can be passed along.
	 **************************************************************************************************/

	class LIBRARY_EXPORT aeRenderer
	{
	private:
		/************************************************************************************************************************/
		/* Variable declaration									                												*/
		/************************************************************************************************************************/
		aeRGBQuad m_RenderColor;
		friend class aeSprite;
		friend class aeAppWindow;
	public:
		SDL_Renderer* m_pRenderer;
	public:
		/************************************************************************************************************************/
		/* Constructors  declaration                                                      													*/
		/************************************************************************************************************************/

		/**********************************************************************************************//**
		 * @fn	aeRenderer::aeRenderer();
		 *
		 * @brief	Default constructor.
		 **************************************************************************************************/

		aeRenderer();

		/**********************************************************************************************//**
		 * @fn	aeRenderer::~aeRenderer();
		 *
		 * @brief	Destructor.
		 **************************************************************************************************/

		~aeRenderer();

		/**********************************************************************************************//**
		 * @fn	void aeRenderer::Clear();
		 *
		 * @brief	Clears this object to its blank/initial state.
		 **************************************************************************************************/

		void Clear();

		/**********************************************************************************************//**
		 * @fn	void aeRenderer::Destroy();
		 *
		 * @brief	Destroys this object.
		 **************************************************************************************************/

		void Destroy();

		/**********************************************************************************************//**
		 * @fn	aeRGBQuad aeRenderer::SetRenderDrawColor(aeRGBQuad Color);
		 *
		 * @brief	Sets render draw color.
		 *
		 * @param	Color	The color.
		 *
		 * @return	An aeRGBQuad.
		 **************************************************************************************************/

		aeRGBQuad SetRenderDrawColor(aeRGBQuad Color);

		/**********************************************************************************************//**
		 * @fn	void aeRenderer::DrawLine(aePoint Start, aePoint End);
		 *
		 * @brief	Draw line.
		 *
		 * @param	Start	The start.
		 * @param	End  	The end.
		 **************************************************************************************************/

		void DrawLine(aePoint Start, aePoint End);

		/**********************************************************************************************//**
		 * @fn	void aeRenderer::DrawRect(aeRect Rectangle);
		 *
		 * @brief	Draw rectangle.
		 *
		 * @param	Rectangle	The Rectangle.
		 **************************************************************************************************/

		void DrawRect(aeRect  Rectangle);

		/**********************************************************************************************//**
		 * @fn	void aeRenderer::DrawPoint(aePoint Point);
		 *
		 * @brief	Draw point.
		 *
		 * @param	Point	The point.
		 **************************************************************************************************/

		void DrawPoint(aePoint Point);

		/**********************************************************************************************//**
		 * @fn	void aeRenderer::RenderTarget(aeSprite* Target);
		 *
		 * @brief	Renders the target described by Target.
		 *
		 * @param [in,out]	Target	If non-null, target for the.
		 **************************************************************************************************/

		void RenderTarget(aeSprite* Target);
	};
}

