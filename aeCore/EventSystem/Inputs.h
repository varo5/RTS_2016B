/**********************************************************************************************//**
 * @file	Game\Inputs.h
 *
 * @brief	Declares the inputs class.
 **************************************************************************************************/

#pragma once
#include "EventsSystem.h"
#include <array>
#include "dll_definition.h"

namespace aeCore
{
	/**********************************************************************************************//**
	 * @enum	KeyStatesDecode
	 *
	 * @brief	Values that represent key states decodes.
	 **************************************************************************************************/

	enum struct LIBRARY_EXPORT KeyStatesDecode : uint8
	{
		StillReleased	= 0,	/**< If the Key is not pressed */
		JustPressed		= 1,	/**< If the key was just pressed */
		JustReleased	= 2,	/**< If the key was just released */
		StillPressed	= 3,	/**< If the key is being pressed */
		Error			= 4		/**< If the Key is not registered */
	};

	/**********************************************************************************************//**
	 * @struct	aeKeyStates
	 *
	 * @brief	Key states.
	 **************************************************************************************************/

	struct LIBRARY_EXPORT aeKeyStates
	{
		/************************************************************************************************************************/
		/* Constructors                                                        													*/
		/************************************************************************************************************************/
		aeKeyStates();
		aeKeyStates(uint8 NumericValue, bool LastState, bool CurrentState);
		aeKeyStates(uint8 NumericValue, uint8 States);
		~aeKeyStates();

		/************************************************************************************************************************/
		/* Variable declaration									                												*/
		/************************************************************************************************************************/
		uint8 NumericValue;
		union
		{
			struct
			{
				bool LastState : 4;
				bool CurrentState : 4;
			};
			uint8 States;
		};

		/************************************************************************************************************************/
		/* Functions declaration                                            													*/
		/************************************************************************************************************************/
		void UpdateKeyState(bool CurrentState);
	};

	

	/**********************************************************************************************//**
	 * @class	aeKeyboard
	 *
	 * @brief	A keyboard.
	 **************************************************************************************************/

	class LIBRARY_EXPORT aeKeyboard
	{
		/************************************************************************************************************************/
		/* Variable declaration									                												*/
		/************************************************************************************************************************/
	protected:
		std::array<uint8, 256> m_pLastState;
		std::array<uint8, 256> m_pCurrentState;
		
	public:
		/************************************************************************************************************************/
		/* Constructors                                                        													*/
		/************************************************************************************************************************/
		aeKeyboard();
		virtual ~aeKeyboard();

		/************************************************************************************************************************/
		/* Functions declaration                                            													*/
		/************************************************************************************************************************/
		int Init();
		void Update();

		KeyStatesDecode operator[](int Key);
	};


	/**********************************************************************************************//**
	 * @class	aeMouse
	 *
	 * @brief	A mouse.
	 **************************************************************************************************/

	class LIBRARY_EXPORT aeMouse
	{
		/************************************************************************************************************************/
		/* Variable declaration									                												*/
		/************************************************************************************************************************/
	protected:
		aeKeyStates m_pButtons[3];
		aePoint m_pointCurrentPosition;
		aePoint m_vClicPosition;
	public:
		/************************************************************************************************************************/
		/* Constructors                                                        													*/
		/************************************************************************************************************************/
		aeMouse();
		virtual ~aeMouse();

		/************************************************************************************************************************/
		/* Functions declaration                                            													*/
		/************************************************************************************************************************/
		int Init();
		void Update();
		void UpdateButton(int Key, bool CurrentState);
		aePoint GetLastClicPosition();
		aePoint GetCurrentPosition();
		KeyStatesDecode operator[](int Key);
	};

	/**********************************************************************************************//**
	 * @class	aeInputs
	 *
	 * @brief	It's a class compounded of all the type of inputs admitted.
	 **************************************************************************************************/

	struct LIBRARY_EXPORT aeInputs
	{
		/************************************************************************************************************************/
		/* Constructors                                                        													*/
		/************************************************************************************************************************/
		aeInputs();
		~aeInputs();

		/************************************************************************************************************************/
		/* Functions declaration                                            													*/
		/************************************************************************************************************************/
		int Init();
		void Update();

		/************************************************************************************************************************/
		/* Variable declaration									                												*/
		/************************************************************************************************************************/
		aeKeyboard Keyboard;
		aeMouse Mouse;
	};
}


